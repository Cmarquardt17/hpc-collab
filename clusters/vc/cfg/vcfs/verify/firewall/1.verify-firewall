#!/bin/bash

## $Header: $
## Source:
## @file vcfs/config/firewall/1.set-ports-services-zones

## @brief This common configuration file contain the firewall configuration function(s).

VCLOAD=../../../provision/loader/shload.sh

if [ ! -f "${VCLOAD}" ] ; then
  echo "${0}: missing: ${VCLOAD}"
  exit 99
fi
source ${VCLOAD}

# if we're given an argument, append test output to it
declare -x OUT=${1:-""}

if [ -n "${OUT}" ] ; then
  touch ${OUT} || exit 1
  exec > >(tee -a "${OUT}") 2>&1
fi

SetFlags >/dev/null 2>&1

## @brief This library file contain the firewall configuration function(s).

declare -x CONFIG_FIREWALL=${CFG_HOMEVAGRANT}/${HOSTNAME}/config/firewall

declare -x FIREWALL_ROOT=${CONFIG_FIREWALL}
declare -x FIREWALL_ZONES=${FIREWALL_ROOT}/zones

running_as=$(id -u -n)

if [ "${running_as}" != root ] ; then
  ErrExit ${EX_NOPERM} "running as: ${running_as} != root"
fi

## @fn VerifyFW()
##
VerifyFW() {
  local zones
  local all_zones=""
  local unused_zones=""

  Rc ErrExit ${EX_OSERR} "systemctl status firewalld"

  if [ -z "${FIREWALL_ROOT}" ] ; then
    ErrExit ${EX_OSERR} "empty firewall configuration"
  fi
  if [ ! -d "${FIREWALL_ROOT}" ] ; then
    ErrExit ${EX_OSFILE} "no firewall directory: ${FIREWALL_ROOT}"
  fi
  if  [ ! -d "${FIREWALL_ZONES}" ] ; then
    ErrExit ${EX_OSFILE} "no firewall zones directory: ${FIREWALL_ZONES}"
  fi 
  zones=$(echo $(ls ${FIREWALL_ZONES}/))
  all_zones=$(firewall-cmd --get-zones)
  unused_zones="${all_zones}"
  local _z

  for _z in ${zones}
  do
    local zone_root=${FIREWALL_ZONES}/${_z}
    local interfaces
    local _i
    unused_zones=${unused_zones//${_z}/}
    interfaces=$(echo $(ls ${zone_root}/interfaces))
    for _i in ${interfaces}
    do
      local int=$(basename ${_i})
      local int_in_zone
      local int_zone

      Rc ErrExit ${EX_OSERR} "firewall-cmd --zone=${_z} --query-interface=${int}"

      int_zone=$(echo $(firewall-cmd --zone=${_z} --list-interfaces))
      int_in_zone=$(echo ${int_zone} | grep ${int})
      if [ -z "${int_in_zone}" ] ; then
        ErrExit ${EX_OSERR} "failed: firewall-cmd --zone=${_z} --query-interface=${int}"
      fi
    done
  done

  return
}

VerifyFW ${OUT}
set -pe
_active_zones=$(echo $(firewall-cmd --get-active-zones | grep -v interfaces:))
Rc ErrExit ${EX_OSERR} "firewall-cmd --runtime-to-permanent"
Rc ErrExit ${EX_OSERR} "firewall-cmd --reload"

for _z in ${_active_zones}
do
  firewall-cmd --info-zone=${_z} | grep -v ': $'
done

trap '' 0
exit ${EX_OK}
