#!/bin/bash

## $Header: $
## Source:
## @file common/provision/useradd/root/verify/provisioned/vclogin/slashcluster/1.compile-slashcluster-batch-job

HOSTNAME=${HOSTNAME:-$(hostname -s)}
CLUSTERNAME=${HOSTNAME:0:2}
VCLOAD_DIRS="/${CLUSTERNAME} /home/vagrant"
SHLOAD="/cfg/provision/loader/shload.sh"
VCLOAD=""
for a in ${VCLOAD_DIRS}
do
  if [ -s "${a}/${SHLOAD}" ] ; then
    VCLOAD="${a}/${SHLOAD}"
  fi
done

if [ -z "${VCLOAD}" ] ; then
  echo "${0}: empty: ${VCLOAD}"
  echo 98
fi

if [ ! -f "${VCLOAD}" ] ; then
  echo "${0}: missing: ${VCLOAD}"
  exit 99
fi
source ${VCLOAD}

# if we're given an argument, append test output to it
declare -x OUT=${1:-""}

if [ -n "${OUT}" ] ; then
  touch ${OUT} || exit 1
  exec > >(tee -a "${OUT}") 2>&1
fi

pwd=$(pwd)
declare -x PRODUCT=$(basename ${pwd})
declare -x BUILDWHERE=${HOMEVAGRANT}/build
declare -x COMMON=${HOMEVAGRANT}/common
declare -x COMMON_TMP=${COMMON}/tmp
declare -x TMP=${COMMON_TMP}
declare -x TMPDIR=${COMMON_TMP}
declare -x BUILDWHAT=${CFG}/${HOSTNAME}/build
declare -x BUILDRMFS=${BUILDWHAT}/${PRODUCT}
declare -x BUILDWHERE_PRODUCT=${BUILDWHERE}/${PRODUCT}
declare -x RPMBUILD=${BUILDWHERE}/rpmbuild

declare -x ARCH=$(uname -m)
declare -x RPMS_ARCH=${RPMBUILD}/RPMS/${ARCH}
declare -x SOURCES=${RPMBUILD}/SOURCES
declare -x SPECDIR=${BUILDWHERE_PRODUCT}/SPECS
declare -x SPEC=${SPECDIR}/${PRODUCT}.spec
declare -x LOCALREPO=${VAGRANT}/etc/localrepo
declare -x tstamp=$(date +%Y.%m.%d.%H:%M)
declare -x JOB_NAME=userverify.${IAM}.${tstamp}.job
declare -x COMMON_TMP_JOB=${COMMON_TMP}/${JOB_NAME}

declare -x VERSION=$(cat version)
declare -x TARBALL=${PRODUCT}-${VERSION}.tgz
declare -x SOURCES_TARBALL=${RPMBUILD}/SOURCES/${TARBALL}

installed_version=$(rpm -a -q | grep slashcluster | sed 's/.x86_64//' | sed 's/slashcluster-//' | sed 's/-[0-9]//')

## XXX not a particularly good way to do this, as adding a variable into the template
## XXX requires adding it to this hacky parser

declare -x MARKER="__DAUGHTER_JOB_TEMPLATE__"
awk "/: ${MARKER}/,/# ${MARKER}/" < ${0}			| \
	sed "s#\\\${COMMON_TMP}#${COMMON_TMP}#"			| \
	sed "s#\\\${COMMON_TMP_JOB}#${COMMON_TMP_JOB}#"		| \
	sed "s#\\\${EX_CONFIG}#${EX_CONFIG}#"			| \
	sed "s#\\\${EX_OK}#${EX_OK}#"				| \
	sed "s#\\\${EX_OSFILE}#${EX_OSFILE}#"			| \
	sed "s#\\\${JOB_NAME}#${JOB_NAME}#"			| \
	sed "s#\\\${RPMBUILD}#${RPMBUILD}#"			| \
	sed "s#\\\${SOURCES}#${SOURCES}#"			| \
	sed "s#\\\${SPEC}#${SPEC}#"				| \
	sed "s#\\\${SPECDIR}#${SPECDIR}#"			| \
	grep -v "${MARKER}"					> \
								${COMMON_TMP_JOB}
if [ ! -r "${COMMON_TMP_JOB}" ] ; then
  ErrExit 2 "COMMON_TMP_JOB:${COMMON_TMP_JOB} nonexistent"
fi

for _v in BUILDWHERE_PRODUCT
do
  if [ ! -d ${!_v} ] ; then
    echo ${_v}:${!_v} nonexistent
    exit ${EX_OSFILE}
  fi
done

if [ ! -d ${BUILDWHERE_PRODUCT}/SOURCES ] ; then
  echo "BUILDWHERE_PRODUCT:${BUILDWHERE_PRODUCT}/SOURCES not directory"
  exit ${EX_OSFILE}
fi

if [ ! -f "${SOURCES_TARBALL}" ] ; then
  cd ${BUILDWHERE_PRODUCT}/SOURCES
  make tarball
  rc=$?
  if [ ${rc} -ne ${EX_OK} ] ; then
    ErrExit ${rc} "make tarball failed, rc=${rc}"
  fi
  cd ${pwd}
fi

Rc ErrExit 3 "chmod +x ${COMMON_TMP_JOB}"
sbatch_out=$(sbatch ${COMMON_TMP_JOB} 2>&1)
rc=$?
jobid=$(echo ${sbatch_out} | awk '{print $4}')
job_out=$(scontrol show job ${jobid} -o | tr '[:upper:]' '[:lower:]' | sed 's/^.*stdout=//' | sed 's/ .*$//')
if [ -s "${job_out}" ] ; then
  if [ -n "${HUSH_OUTPUT}" ] ; then
    echo --- ${job_out} --- 
    cat ${job_out}
    echo --- ${job_out} --- 
  fi
fi
if [ ${rc} -eq ${EX_OK} ] ; then
  if [ -z "${VERBOSE}" ] ; then
    rm -f ${job_out}
  fi
fi
exit ${rc}

### ### ### ### ###
: __DAUGHTER_JOB_TEMPLATE__
#!/bin/bash


#SBATCH --partition=compile
#SBATCH --chdir=${COMMON_TMP}
#SBATCH --job-name=${JOB_NAME}
#SBATCH --output=${COMMON_TMP_JOB}.%j.out
#SBATCH --wait

for _v in RPMBUILD SPEC SPECDIR
do
  case "${!_v}" in
  "")
      echo empty ${_v}
      exit ${EX_CONFIG}
      ;;
  *)
      ;;
  esac
done

_files="SPEC"
_dirs="RPMBUILD SPECDIR"

# loop for when/if there are more, or as a subfunc
for _v in ${_files}
do
  if [ ! -f ${!_v} ] ; then
    echo ${_v}:${!_v} nonexistent
    exit ${EX_OSFILE}
  fi
done

for _v in ${_dirs}
do
  if [ ! -d ${!_v} ] ; then
    echo ${_v}:${!_v} nonexistent
    exit ${EX_OSFILE}
  fi
done

rc=0
cd ${pwd}

_rpmbuild=$(which rpmbuild)

if [ -z "${_rpmbuild}" ] ; then
  echo "empty rpmbuild"
  exit ${EX_OSFILE}
fi

if [ ! -x ${_rpmbuild} ] ; then
  echo "rpmbuild is not executable"
  exit ${EX_OSFILE}
fi

${_rpmbuild} --define "_topdir ${RPMBUILD}" -ba ${SPEC}
rc=$?

if [ ${rc} -ne ${EX_OK} ] ; then
  echo "rpmbuild --define \"_topdir ${RPMBUILD}\" -ba ${SPEC}: rc=${rc} != EX_OK"
  exit ${rc}
fi

# leave the build area usable by members of group vagrant
chmod -R g+w ${RPMBUILD}     || exit ${EX_OSFILE}
chgrp -R vagrant ${RPMBUILD} || exit ${EX_OSFILE}

exit ${EX_OK}

# __DAUGHTER_JOB_TEMPLATE__
