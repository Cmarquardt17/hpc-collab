# -*- mode: ruby -*-
# vi: set ft=ruby tabstop=2 shiftwidth=2 syntax=on background=dark :

require 'pathname'

REPODISK_SIZE = 20	# Gb

# The goal is to find the cluster parameters, relative to the Vagrantfile
### ENV["VAGRANT_CWD"] = #{ENV["HOME"]}/hpc-collab/clusters/vx

clustername_fullpath_raw = %x[pwd]
clustername_fullpath     = "#{clustername_fullpath_raw}"
clustername_fullpath     = #{clustername_fullpath}.chomp
clustername              = Pathname.new(clustername_fullpath).basename
clustername              = "#{clustername}".chomp

ENV["LC_ALL"] = "en_US.UTF-8"
ENV["VC"]     = "#{clustername}"
ENV["TZ"]     = "MST7MDT"

nodes_file = "#{clustername_fullpath_raw}".chomp + "/Vagrantfile." + clustername + ".nodes"
nodes_file_path = Pathname.new(nodes_file)
##print "Nodes defined: #{nodes_file_path}\n\n"
if !File.exists?(nodes_file_path)
  ## walk up the path to find the Vagrantfile
  print "nodes_file_path:#{nodes_file_path} does not exist\n"
else
  load File.expand_path(nodes_file_path)
end

### XXX ### XXX ### XXX ###
### The ruby way is to define nodes in an external YAML file, rather than to define within ruby
### XXX for now, include it inline here, or explore a file tree walk to collect generically

# -*- mode: ruby -*-
# vi: set ft=ruby tabstop=2 shiftwidth=2 syntax=on background=dark :

### XXX @todo order by incorporating cfg/<node>/requires/*
### XXX @todo attributes should be combined with requires/*
### XXX @todo invoked commands should be moved into file system, then eval-ed
### XXX @todo vcgate/bridge attribute
### XXX @todo future: collect these from a json-structured node manifest

hosts  = "common/etc/hosts"
ethers = "common/etc/ethers"

nodes = {
  "vxsched" => {  :ip             => `grep vxsched #{hosts}  | awk '{printf "%s",$1}'`,
									:mac            => `grep vxsched #{ethers} | awk '{printf "%s",$1}' | sed 's/://g'`,
									:bridge         => nil,
									:memory         => %x[ls cfg/vxsched/attributes/memory],
									:cpus	          => %x[ls cfg/vxsched/attributes/procs],
									:ingestfromhost => nil,
									:adddiskpath    => nil
								},

  "vx1"			=> {  :ip	            => `grep vx1 #{hosts}  | awk '{printf "%s",$1}'`,
									:mac            => `grep vx1 #{ethers} | awk '{printf "%s",$1}' | sed 's/://g'`,
									:bridge         => nil,
									:memory         => %x[ls cfg/vx1/attributes/memory],
									:cpus           => %x[ls cfg/vx1/attributes/procs],
									:ingestfromhost => nil,
									:adddiskpath    => nil
								},

  "vx2"			=> {  :ip             => `grep vx2 #{hosts}  | awk '{printf "%s",$1}'`,
									:mac            => `grep vx2 #{ethers} | awk '{printf "%s",$1}' | sed 's/://g'`,
									:bridge         => nil,
									:memory         => %x[ls cfg/vx2/attributes/memory],
									:cpus           => %x[ls cfg/vx2/attributes/procs],
									:ingestfromhost => nil,
									:adddiskpath    => nil
								},

  "vxlogin"		=> {:ip             => `grep vxlogin #{hosts}  | awk '{printf "%s",$1}'`,
									:mac            => `grep vxlogin #{ethers} | awk '{printf "%s",$1}' | sed 's/://g'`,
									:bridge         => nil,
									:memory         => %x[ls cfg/vxlogin/attributes/memory],
									:cpus           => %x[ls cfg/vxlogin/attributes/procs],
									:ingestfromhost => nil,
									:adddiskpath    => nil
								}
}
###

### XXX ### XXX ### XXX ###


Vagrant.configure("2") do |config|
  config.vm.box = "generic/centos7"

  config.ssh.forward_env   = ["TZ", "LC_ALL", "VC"]
  config.ssh.forward_agent = true
  config.ssh.forward_x11   = true

  config.vm.provision "shell", path:  "../common/bin/provision.sh"

  config.vm.synced_folder ".",                "/vagrant",                       create: true, type: "virtualbox"
  config.vm.synced_folder "../vx",            "/vx",                            create: true, type: "virtualbox"
  config.vm.synced_folder "../vc",            "/vc",		                        create: true, type: "virtualbox"

  config.vm.synced_folder "../../tarballs",   "/vc/xfr",                        create: true, type: "virtualbox"
  config.vm.synced_folder "../../tarballs",   "/vx/xfr",                        create: true, type: "virtualbox"

  # in-cluster tools
  # in theory, flags could be constructed differently for each cluster (/vc vs /vx) 
  # or different version of the tools could be mounted for separate experiments
  config.vm.synced_folder "../common/bin",    "/vagrant/cfg/provision/bin", create: true, type: "virtualbox"
  config.vm.synced_folder "../common/bin",    "/vx/cfg/provision/bin",      create: true, type: "virtualbox"
  config.vm.synced_folder "../common/env",    "/vx/cfg/provision/env",      create: true, type: "virtualbox"
  config.vm.synced_folder "../common/flag",   "/vx/cfg/provision/flag",     create: true, type: "virtualbox"
  config.vm.synced_folder "../common/inc",    "/vx/cfg/provision/inc",      create: true, type: "virtualbox"
  config.vm.synced_folder "../common/lib",    "/vx/cfg/provision/lib",      create: true, type: "virtualbox"
  config.vm.synced_folder "../common/loader", "/vx/cfg/provision/loader",   create: true, type: "virtualbox"

# config.vm.network # eth0 will always be NAT (Vagrant requirement)

  nodes.each_with_index do |(hostnm,manifest), index|
    config.vm.define hostnm do |cfg|
      cfg.vm.provider :virtualbox do |vb, override|
        vb.memory = manifest[:memory].chomp
        vb.cpus = manifest[:cpus].chomp

        override.vm.hostname = hostnm
				override.vm.graceful_halt_timeout = 10
        override.vm.network "private_network", nic_type: "virtio",
															:ip => manifest[:ip],
															:mac => manifest[:mac]

        if manifest[:bridge] then
          override.vm.network "public_network",
															:ip => manifest[:ip],
															nic_type: "virtio",
															:bridge => manifest[:bridge]
        end # manifest[:bridge]

        override.trigger.before [:up] do |noduplicate|
          noduplicate.run = {path: "../common/bin/nodup.sh", args: hostnm }
        end # override.trigger.before[:up]

				if #{manifest[:ingestfromhost]}.chomp then
          override.trigger.before [:up] do |ingestfromhost|

### XXX FIXME
### XXX     manifest[:ingestfromhost].each do |key,value|
### XXX       print "       ", "#{key}  #{value}\n"
### XXX     end
### XXX Doesn't execute unless run method is set, but need to set path and args

            ingestfromhost.run = { path: "../common/bin/ingestfromhost.sh" , args: "vcfs :DOTFILES :DOTSSH" }
### XXX FIXME ingestfromhost.run = { path: manifest[:ingestfromhost[#{path}]], args: manifest[:ingestfromhost[#{:args}]] }

          end # override.trigger.before [:up]
				end # manifest[:ingestfromhost]

         if manifest[:adddiskpath] then
           unless File.exist?(manifest[:adddiskpath])
             vb.customize ['createhd', '--filename', manifest[:adddiskpath],
														'--variant', 'Fixed', '--size', REPODISK_SIZE * 1024]
           end # File.exit?(manifest[:adddiskpath])

           vb.customize ['storageattach', :id,  '--storagectl', 'IDE Controller', '--port', 1, '--device', 0,
  													'--type', 'hdd', '--medium', manifest[:adddiskpath]]
         end # manifest[:adddiskpath]

        override.trigger.before [:destroy] do |unprovision|
          unprovision.run = {path: "../common/bin/unprovision.sh", args: hostnm }
        end # override.trigger.before

      end # cfg.vm.provider
    end # config.vm
  end # nodes
end # configure
