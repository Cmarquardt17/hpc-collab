# -*- mode: ruby -*-
# vim: set ft=ruby tabstop=2 shiftwidth=2 syntax=on background=dark :

require 'pathname'

REPODISK_SIZE = 16	# Gb

clustername_fullpath_raw = %x[pwd]
clustername_fullpath     = "#{clustername_fullpath_raw}"
clustername_fullpath     = #{clustername_fullpath}.chomp
clustername              = Pathname.new(clustername_fullpath).basename
clustername              = "#{clustername}".chomp

ENV["LC_ALL"] = "en_US.UTF-8"
ENV["VC"]     = "#{clustername}"

# the following will be replaced per-cluster with the constructed nodes table

### ### ### ### ### ### ###  ###
### ###  _insert_nodes_  ### ###
### ### ### ### ### ### ###  ###

# the above  will be replaced per-cluster with the constructed nodes table

Vagrant.configure("2") do |config|
  config.vm.box = "generic/centos7"

  config.ssh.forward_env   = ["TZ", "LC_ALL", "VC"]
  config.ssh.forward_agent = true
  config.ssh.forward_x11   = true

  # useful so that the environment's proxy can be set very early, such as to install the NFS plugin
  unless Vagrant.has_plugin?("vagrant-proxyconf")
    puts 'Installing vagrant-proxyconf plugin...'
    system('vagrant plugin install vagrant-proxyconf')
  end

  if Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.http = ENV["http_proxy"]
    config.proxy.no_proxy = ".lanl.gov,128.165"
    config.yum_proxy.http = ENV["http_proxy"]
    # config.proxy.RSYNC_PROXY = ENV["RSYNC_PROXY"]
  end

  config.vm.provision "shell", path:  "../common/bin/provision.sh"


# the following will be replaced per-cluster with the synced_folder table

### ### ### ### ### ### ### ### ### ### #
### ###  _insert_synced_folders_  ### ###
### ### ### ### ### ### ### ### ### ### #
 
# the above will be replaced per-cluster with the synced_folder table
 

# config.vm.network # eth0 will always be NAT (Vagrant requirement)

  nodes.each_with_index do |(hostnm,manifest), index|
    config.vm.define hostnm do |cfg|
      cfg.vm.provider :virtualbox do |vb, override|
        vb.memory = manifest[:memory].chomp
        vb.cpus = manifest[:cpus].chomp

        override.vm.hostname = hostnm
				override.vm.graceful_halt_timeout = 10
        override.vm.network "private_network", nic_type: "virtio",
															:ip => manifest[:ip],
															:mac => manifest[:mac]

        if manifest[:bridge] then
          override.vm.network "public_network",
															:ip => manifest[:ip],
															nic_type: "virtio",
															:bridge => manifest[:bridge]
        end # manifest[:bridge]

        override.trigger.before [:up] do |noduplicate|
          noduplicate.run = {path: "../common/bin/nodup.sh", args: hostnm }
        end # override.trigger.before[:up]

				if #{manifest[:ingestfromhost]}.chomp then
          override.trigger.before [:up] do |ingestfromhost|

### XXX FIXME
### XXX     manifest[:ingestfromhost].each do |key,value|
### XXX       print "       ", "#{key}  #{value}\n"
### XXX     end
### XXX Doesn't execute unless run method is set, but need to set path and args

            ingestfromhost.run = { path: "../common/bin/ingestfromhost.sh" , args: "vcfs :DOTFILES :DOTSSH" }
### XXX FIXME ingestfromhost.run = { path: manifest[:ingestfromhost[#{path}]], args: manifest[:ingestfromhost[#{:args}]] }

          end # override.trigger.before [:up]
				end # manifest[:ingestfromhost]

        # use host's dns resolver
        vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
        vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]

        # allow IO to use additional cpu cores
        vb.customize ["modifyvm", :id, "--ioapic", "on"]

        if manifest[:adddiskpath] then
          unless File.exist?(manifest[:adddiskpath])
            vb.customize ['createhd', '--filename', manifest[:adddiskpath],
														'--variant', 'Fixed', '--size', REPODISK_SIZE * 1024]
        end # File.exit?(manifest[:adddiskpath])

        vb.customize ['storageattach', :id,  '--storagectl', 'IDE Controller', '--port', 1, '--device', 0,
  													'--type', 'hdd', '--medium', manifest[:adddiskpath]]
        end # manifest[:adddiskpath]

        override.trigger.before [:destroy] do |unprovision|
          unprovision.run = {path: "../common/bin/unprovision.sh", args: hostnm }
        end # override.trigger.before

      end # cfg.vm.provider
    end # config.vm
  end # nodes
end # configure
